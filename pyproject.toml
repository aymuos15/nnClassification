[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-classifier"
version = "0.1.0"
description = "Production-ready image classification framework with flexible architecture support"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "accelerate>=0.20.0",
    "loguru>=0.7.0",
    "matplotlib>=3.7.0",
    "numpy>=1.24.0",
    "onnx>=1.15.0",
    "onnxruntime>=1.16.0",
    "Pillow>=9.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "scikit-learn>=1.3.0",
    "seaborn>=0.12.0",
    "split-folders>=0.5.0",
    "tensorboard>=2.14.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "ruff>=0.1.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "pymdown-extensions>=10.0.0",
]
dp = [
    "opacus>=1.4.0",
]
optuna = [
    "optuna>=3.0.0",
    "plotly>=5.0.0",
    "kaleido>=0.2.0",
]

[project.scripts]
ml-export = "ml_src.cli.export:main"
ml-inference = "ml_src.cli.inference:main"
ml-init-config = "ml_src.cli.init_config:main"
ml-lr-finder = "ml_src.cli.lr_finder:main"
ml-search = "ml_src.cli.search:main"
ml-split = "ml_src.cli.splitting:main"
ml-train = "ml_src.cli.train:main"
ml-visualise = "ml_src.cli.visualise:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["ml_src*"]
namespaces = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
]

[tool.ruff]
# Ruff configuration - replaces black, isort, and flake8
line-length = 100
target-version = "py38"

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and other useful rules
select = [
    "E",      # pycodestyle errors
    "F",      # Pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "N812",   # lowercase imported as non-lowercase (allow F for functional)
    "N806",   # variable in function should be lowercase (allow constants like MODEL_REGISTRY)
]

[tool.ruff.lint.isort]
known-first-party = ["ml_src"]

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
